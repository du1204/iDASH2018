# Check the speed of semi-parallel approach
# for logistic regression with covariates
# Karolina Sikorska and Paul Eilers, 2013
#####sample dataset from the paper#########
#set.seed(2013)
#n = 10000
#m = 1000
#k = 1
#S = matrix(2 * runif(n * m), n, m)
#X0 = matrix(rnorm(n * k), n, k)
#X = cbind(1, X0)
#y = rbinom(n, size = 1, prob = c(0.5, 0.5))
#####sample dataset from the paper##########
######import dataset extracted from PGP########
#SNPs
S_list = read.table("snpMat.txt", header=T)
S = matrix(unlist(S_list, use.names=F), ncol = length(S_list), byrow=F)
covariate = read.csv("covariates.csv", header=T, sep=",")
#disease/control condition
y = unlist(covariate[2], use.names=F)
#covariates w/ missing values
rawX0 = covariate[3:5]
#norm
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
#impute missing values w/ mean
X0_list = lapply(rawX0, function(x) ifelse(is.na(x), mean(x, na.rm=T), x))
X0 = (matrix(unlist(X0_list), ncol = length(X0_list), byrow=F))
X0 = normalize(X0)
#covariates
X = cbind(1, X0)
#number of individuals
n = nrow(S)
#number of SNPs
m = ncol(S)
#number of covariates
k = ncol(X0)
######import dataset extracted from PGP########
cat(sprintf("the number of samples : %d \n", n))
cat(sprintf("the number of SNPs : %d \n", m))
cat(sprintf("the number of covariates : %d \n", k))
# Do the computations
t0 = proc.time()[1]
mod0 = glm( y ~ X-1, family = binomial("logit"))
p = mod0$fitted
w = p * (1 - p)
z = log(p / (1 - p)) + (y - p) / (p * (1 - p))
xtw = t(X * w)
U1 = xtw %*% z
U2 = solve(xtw %*% X, U1)
ztr = z  - X %*% U2
U3 = xtw %*% S
U4 = solve(xtw %*% X, U3)
Str = S - X %*% U4
Str2 = colSums(w * Str^2)
b = crossprod(ztr * w, Str)/Str2
err = sqrt(1/ Str2)
pvalue_parallel = 2 * pnorm(-abs(b / err))
pval = as.numeric(as.matrix(pvalue_parallel))
# Report time
t1 = proc.time()[1] - t0
msip = 1e-06 * n * m / t1
cat(sprintf("Speed: %2.1f Msips\n", msip))
###check results
t2 = proc.time()[1]
b1 = NULL
err1 = NULL
pval1 = NULL
for(i in 1:m){
mod1 = glm(y ~ S[, i] + X0, family = binomial ("logit"))
b1[i] = summary(mod1)$coef[2, 1]
err1[i] = summary(mod1)$coef[2, 2]
pval1[i] = summary(mod1)$coef[2, 4]
}
t3 = proc.time()[1] - t2
msip1 = 1e-06 * n * m / t3
cat(sprintf("Speed: %2.1f Msips\n", msip1))
#true positive
print("true positive rate")
length(which(pval1[which(pval<=0.01)]<=0.01))/length(which(pval<=0.01))
#type i error/false positive
print("type i error/false positive rate")
length(which(pval1[which(pval>0.01)]<=0.01))/(length(which(pval1[which(pval>0.01)]<=0.01)) + length(which(pval1[which(pval>0.01)]>0.01)))
#type ii error/false negative
print("type ii error/false negative rate")
length(which(pval1[which(pval<=0.01)]>0.01))/length(which(pval<=0.01))
#true negative
print("true negative rate")
length(which(pval1[which(pval>0.01)]>0.01))/length(which(pval>0.01))
######import dataset extracted from PGP########
#SNPs
S_list = read.table("snpMat.txt", header=T)
S = matrix(unlist(S_list, use.names=F), ncol = length(S_list), byrow=F)
covariate = read.csv("covariates.csv", header=T, sep=",")
#disease/control condition
y = unlist(covariate[2], use.names=F)
#covariates w/ missing values
rawX0 = covariate[3:5]
#norm
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
#impute missing values w/ mean
X0_list = lapply(rawX0, function(x) ifelse(is.na(x), mean(x, na.rm=T), x))
X0 = (matrix(unlist(X0_list), ncol = length(X0_list), byrow=F))
X0 = normalize(X0)
#covariates
X = cbind(1, X0)
#number of individuals
n = nrow(S)
#number of SNPs
m = ncol(S)
#number of covariates
k = ncol(X0)
cat(sprintf("the number of samples : %d \n", n))
cat(sprintf("the number of SNPs : %d \n", m))
cat(sprintf("the number of covariates : %d \n", k))
# Do the computations
t0 = proc.time()[1]
mod0 = glm( y ~ X-1, family = binomial("logit"))
p = mod0$fitted
w = p * (1 - p)
z = log(p / (1 - p)) + (y - p) / (p * (1 - p))
xtw = t(X * w)
setwd("~/Dropbox/Research/My_Research/IDASH2018/release")
# Check the speed of semi-parallel approach
# for logistic regression with covariates
# Karolina Sikorska and Paul Eilers, 2013
#####sample dataset from the paper#########
#set.seed(2013)
#n = 10000
#m = 1000
#k = 1
#S = matrix(2 * runif(n * m), n, m)
#X0 = matrix(rnorm(n * k), n, k)
#X = cbind(1, X0)
#y = rbinom(n, size = 1, prob = c(0.5, 0.5))
#####sample dataset from the paper##########
######import dataset extracted from PGP########
#SNPs
S_list = read.table("snpMat.txt", header=T)
S = matrix(unlist(S_list, use.names=F), ncol = length(S_list), byrow=F)
covariate = read.csv("covariates.csv", header=T, sep=",")
#disease/control condition
y = unlist(covariate[2], use.names=F)
#covariates w/ missing values
rawX0 = covariate[3:5]
#norm
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
#impute missing values w/ mean
X0_list = lapply(rawX0, function(x) ifelse(is.na(x), mean(x, na.rm=T), x))
X0 = (matrix(unlist(X0_list), ncol = length(X0_list), byrow=F))
X0 = normalize(X0)
#covariates
X = cbind(1, X0)
#number of individuals
n = nrow(S)
#number of SNPs
m = ncol(S)
#number of covariates
k = ncol(X0)
######import dataset extracted from PGP########
cat(sprintf("the number of samples : %d \n", n))
cat(sprintf("the number of SNPs : %d \n", m))
cat(sprintf("the number of covariates : %d \n", k))
# Do the computations
t0 = proc.time()[1]
mod0 = glm( y ~ X-1, family = binomial("logit"))
p = mod0$fitted
w = p * (1 - p)
z = log(p / (1 - p)) + (y - p) / (p * (1 - p))
xtw = t(X * w)
U1 = xtw %*% z
U2 = solve(xtw %*% X, U1)
ztr = z  - X %*% U2
U3 = xtw %*% S
U4 = solve(xtw %*% X, U3)
Str = S - X %*% U4
Str2 = colSums(w * Str^2)
b = crossprod(ztr * w, Str)/Str2
err = sqrt(1/ Str2)
pvalue_parallel = 2 * pnorm(-abs(b / err))
pval = as.numeric(as.matrix(pvalue_parallel))
# Report time
t1 = proc.time()[1] - t0
msip = 1e-06 * n * m / t1
cat(sprintf("Speed: %2.1f Msips\n", msip))
###check results
t2 = proc.time()[1]
b1 = NULL
err1 = NULL
pval1 = NULL
for(i in 1:m){
mod1 = glm(y ~ S[, i] + X0, family = binomial ("logit"))
b1[i] = summary(mod1)$coef[2, 1]
err1[i] = summary(mod1)$coef[2, 2]
pval1[i] = summary(mod1)$coef[2, 4]
}
t3 = proc.time()[1] - t2
msip1 = 1e-06 * n * m / t3
cat(sprintf("Speed: %2.1f Msips\n", msip1))
#true positive
print("true positive rate")
length(which(pval1[which(pval<=0.01)]<=0.01))/length(which(pval<=0.01))
#type i error/false positive
print("type i error/false positive rate")
length(which(pval1[which(pval>0.01)]<=0.01))/(length(which(pval1[which(pval>0.01)]<=0.01)) + length(which(pval1[which(pval>0.01)]>0.01)))
#type ii error/false negative
print("type ii error/false negative rate")
length(which(pval1[which(pval<=0.01)]>0.01))/length(which(pval<=0.01))
#true negative
print("true negative rate")
length(which(pval1[which(pval>0.01)]>0.01))/length(which(pval>0.01))
X
save.image("~/Dropbox/Research/My_Research/IDASH2018/release/idash2018.RData")
View(X)
View(X0)
View(rawX0)
w
pval
View(X0_list)
View(normalize)
View(mod0)
X-1
mod0 = glm( y ~ X-1, family = binomial("logit"))
######import dataset extracted from PGP########
#SNPs
S_list = read.table("snpMat.txt", header=T)
# Check the speed of semi-parallel approach
# for logistic regression with covariates
# Karolina Sikorska and Paul Eilers, 2013
#####sample dataset from the paper#########
#set.seed(2013)
#n = 10000
#m = 1000
#k = 1
#S = matrix(2 * runif(n * m), n, m)
#X0 = matrix(rnorm(n * k), n, k)
#X = cbind(1, X0)
#y = rbinom(n, size = 1, prob = c(0.5, 0.5))
#####sample dataset from the paper##########
######import dataset extracted from PGP########
#SNPs
S_list = read.table("snpMat.txt", header=T)
S = matrix(unlist(S_list, use.names=F), ncol = length(S_list), byrow=F)
covariate = read.csv("covariates.csv", header=T, sep=",")
#disease/control condition
y = unlist(covariate[2], use.names=F)
#covariates w/ missing values
rawX0 = covariate[3:5]
#norm
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
#impute missing values w/ mean
X0_list = lapply(rawX0, function(x) ifelse(is.na(x), mean(x, na.rm=T), x))
X0 = (matrix(unlist(X0_list), ncol = length(X0_list), byrow=F))
X0 = normalize(X0)
#covariates
X = cbind(1, X0)
#number of individuals
n = nrow(S)
#number of SNPs
m = ncol(S)
#number of covariates
k = ncol(X0)
######import dataset extracted from PGP########
cat(sprintf("the number of samples : %d \n", n))
cat(sprintf("the number of SNPs : %d \n", m))
cat(sprintf("the number of covariates : %d \n", k))
# Do the computations
t0 = proc.time()[1]
mod0 = glm( y ~ X-1, family = binomial("logit"))
p = mod0$fitted
w = p * (1 - p)
z = log(p / (1 - p)) + (y - p) / (p * (1 - p))
xtw = t(X * w)
U1 = xtw %*% z
U2 = solve(xtw %*% X, U1)
ztr = z  - X %*% U2
U3 = xtw %*% S
U4 = solve(xtw %*% X, U3)
Str = S - X %*% U4
Str2 = colSums(w * Str^2)
b = crossprod(ztr * w, Str)/Str2
err = sqrt(1/ Str2)
pvalue_parallel = 2 * pnorm(-abs(b / err))
pval = as.numeric(as.matrix(pvalue_parallel))
# Report time
t1 = proc.time()[1] - t0
msip = 1e-06 * n * m / t1
cat(sprintf("Speed: %2.1f Msips\n", msip))
###check results
t2 = proc.time()[1]
b1 = NULL
err1 = NULL
pval1 = NULL
for(i in 1:m){
mod1 = glm(y ~ S[, i] + X0, family = binomial ("logit"))
b1[i] = summary(mod1)$coef[2, 1]
err1[i] = summary(mod1)$coef[2, 2]
pval1[i] = summary(mod1)$coef[2, 4]
}
t3 = proc.time()[1] - t2
msip1 = 1e-06 * n * m / t3
cat(sprintf("Speed: %2.1f Msips\n", msip1))
#true positive
print("true positive rate")
length(which(pval1[which(pval<=0.01)]<=0.01))/length(which(pval<=0.01))
#type i error/false positive
print("type i error/false positive rate")
length(which(pval1[which(pval>0.01)]<=0.01))/(length(which(pval1[which(pval>0.01)]<=0.01)) + length(which(pval1[which(pval>0.01)]>0.01)))
#type ii error/false negative
print("type ii error/false negative rate")
length(which(pval1[which(pval<=0.01)]>0.01))/length(which(pval<=0.01))
#true negative
print("true negative rate")
length(which(pval1[which(pval>0.01)]>0.01))/length(which(pval>0.01))
View(X)
mod0[["residuals"]]
View(X-1)
Z=X-1
Z[1,1]
Z[1,1]*mod0$coefficients[1]+Z[1,2]*mod0$coefficients[2]+Z[1,3]*mod0$coefficients[3]+Z[1,4]*mod0$coefficients[4]
1/(1+exp(5.905062))
View(Z)
remove(Z)
summary(mod0)
1 + 2 / 3
View(pval)
Which(pval <= 0.01)
which(pval<=0.01)
# Check the speed of semi-parallel approach
# for logistic regression with covariates
# Karolina Sikorska and Paul Eilers, 2013
#####sample dataset from the paper#########
#set.seed(2013)
#n = 10000
#m = 1000
#k = 1
#S = matrix(2 * runif(n * m), n, m)
#X0 = matrix(rnorm(n * k), n, k)
#X = cbind(1, X0)
#y = rbinom(n, size = 1, prob = c(0.5, 0.5))
#####sample dataset from the paper##########
######import dataset extracted from PGP########
#SNPs
S_list = read.table("snpMat.txt", header=T)
S = matrix(unlist(S_list, use.names=F), ncol = length(S_list), byrow=F)
covariate = read.csv("covariates.csv", header=T, sep=",")
#disease/control condition
y = unlist(covariate[2], use.names=F)
#covariates w/ missing values
rawX0 = covariate[3:5]
#norm
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
#impute missing values w/ mean
X0_list = lapply(rawX0, function(x) ifelse(is.na(x), mean(x, na.rm=T), x))
X0 = (matrix(unlist(X0_list), ncol = length(X0_list), byrow=F))
X0 = normalize(X0)
#covariates
X = cbind(1, X0)
#number of individuals
n = nrow(S)
#number of SNPs
m = ncol(S)
#number of covariates
k = ncol(X0)
######import dataset extracted from PGP########
cat(sprintf("the number of samples : %d \n", n))
cat(sprintf("the number of SNPs : %d \n", m))
cat(sprintf("the number of covariates : %d \n", k))
# Do the computations
t0 = proc.time()[1]
mod0 = glm( y ~ X-1, family = binomial("logit"))
p = mod0$fitted
w = p * (1 - p)
z = log(p / (1 - p)) + (y - p) / (p * (1 - p))
xtw = t(X * w)
U1 = xtw %*% z
U2 = solve(xtw %*% X, U1)
ztr = z  - X %*% U2
U3 = xtw %*% S
U4 = solve(xtw %*% X, U3)
Str = S - X %*% U4
Str2 = colSums(w * Str^2)
b = crossprod(ztr * w, Str)/Str2
err = sqrt(1/ Str2)
pvalue_parallel = 2 * pnorm(-abs(b / err))
pval = as.numeric(as.matrix(pvalue_parallel))
statistics_parallel = (b * b) / (err * err)
statistics = as.numeric(as.matrix(statistics_parallel))
View(statistics_parallel)
errorsq = err * err
View(errorsq)
statistics_parallel = (b * b) / (err * err)
View(statistics_parallel)
View(pvalue_parallel)
tstat = t(statistics_parallel)
View(tstat)
tpval = t(pvalue_parallel)
View(tpval)
bind = cbind(tpval, tstat)
bind = cbind(bind, errorsq)
View(bind)
